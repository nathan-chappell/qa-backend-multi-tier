

Building an Expression Engine.
As workflows grew in complexity, our XMLs needed a full support of almost anything one might do in a programming language. We packed complex functionalities to tasks, but there were many custom math operations or data transformations that simply couldn't be defined in such a generic manner. We realized that we needed the ability to write small code snippets and use them to accomplish any kind of custom functionality, so we looked out for an expression engine being able to parse and run custom code. 
As our workflow was actually a script of a sort, with variables defined dynamically on the fly, we thought the most suitable scripting language would be JavaScript. Since our code was written in .NET, our first solution was Microsoft's .NET implementation of a JavaScript V8 engine - [ClearScript](https://github.com/microsoft/ClearScript). This implementation was used initially, until we realized that it had major performance problems.
Looking further, we decided to try the (back then relatively new) Microsoft's .NET Compiler Platform [Roslyn](https://github.com/dotnet/roslyn) and run our scripts in C#. We never looked back since the performance was much faster than anything else we tried. There is an initial compilation penalty, but we reduced that by caching each of our snippets as dynamically generated assembly on disk, so we loaded it from there on every repeated run. This gave us the final ingredient for writing workflows with any kind of custom logic. The way our worklows looked at that point, we had an internal joke that we produced XML#.

