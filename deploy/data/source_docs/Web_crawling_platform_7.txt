

Cluster environment was our primary goal, but as we went along with implementation, we realized that there were simply problems we couldn't have solved without the actor model. These problems are inherent to the nature of distributed systems. For example, as our workflow was parallelized, there was a need to pause, restart or cancel the whole workflow, either by manual action from the user interface or by the workflow logic itself in one of the parallel iterations. On a single machine one could use various locking techniques to synchronize behavior of parallel executions, but in a distributed system that all changes. Akka, as well as other actor models, is designed to deal with this kind of problems. Having every logical unit-of-work part defined as a single actor responsible for handling it, it was easy to deal with concurrency since messages (commands) are always processed one at a time. The workflow control problem was solved by having a single runner actor which responded to the pause, restart or cancel messages one at a time, notifying other (distributed) parts/actors of the same workflow and not proceeding further with message processing until making sure they completed their part.

