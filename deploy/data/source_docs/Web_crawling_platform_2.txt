

We were tasked with building a generic web crawling workflow system, able to handle any kind of custom logic and deal with website bot protection, suitable for non experienced technical personnel and capable of  scaling horizontally. There is no commercial solution meeting such demands on the market. We managed to implement a generic solution by describing workflows via XML, having library of packed tasks able to run that XML and implementing custom tasks scripting via [Roslyn](https://github.com/dotnet/roslyn) compiler platform. Advanced web crawling tasks and bot protection were done via [CEF - Chromium Embedded Framework](https://github.com/chromiumembedded/cef). Horizontal scaling was implemented by modeling the entire application architecture with the [Akka.NET](https://getakka.net/) actor model framework and using its built-in cluster capabilities. Docker and Kubernetes were used for running the application parts in the cloud environment.

Defining workflows via XML.
One of the initial demands was to try to produce a user interface, one that could make the system usable by someone technically savvy, but not necessarily an experienced software developer. We looked at commercial tools like [Mozenda](https://www.mozenda.com) for ideas and developed a flowchart-like user interface in ReactJS and .NET web api, with the ability to drag and drop tasks and define their properties visually. We also created a class library workflow model on the backend and were able to transform it to/from our front-end and also serialize/deserialize it to/from a database.
After testing such a solution for a while, it turned out that really complex workflows with hundreds of tasks, and most of our client's workflows are like that, were simply too complex to comprehend, search through and change in such a visual manner. Another problem was that frequent changes were hard to track and revert, so it was almost like we needed a source control system for the stored workflows. 
Since we used XML for serialization, it occurred to us that using a decent XML-friendly text editor and working directly on the xml made everyone more productive. Simple file as a workflow definition was also suitable for source control. Hence we opted for such simpler, yet more effective solution and completely separated the logic of designing workflows from running them.

